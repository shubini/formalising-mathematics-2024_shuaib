/-
Copyright (c) 2023 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author : Jujian Zhang
-/
import RingTheory.Ideal.Operations
import Topology.Algebra.Polynomial
import Topology.Bases


/-!
# Prime spectrum of a ring and its Zariski topology

This files contains the following: 
- Zariski topology on the set of all prime ideals of any ring `R`.
- a basis for Zariski topology 
- if `f : R ‚Üí+* S` is a ring homomorphism, then `ùî≠ ‚Ü¶ f‚Åª¬π ùî≠` is continuous. 
- for integral domains, there is a unique generic point.
-/


open TopologicalSpace

open scoped Pointwise

universe u

variable (R S : Type u) [CommRing R] [CommRing S]

/-- `Spec R` is the set of prime ideals of `R`
-/
@[ext]
structure Spec : Type u where
  asIdeal : Ideal R
  IsPrime : as_ideal.IsPrime

attribute [instance] Spec.isPrime

-- making sure class inference knows term of `Spec R` is prime
section

variable {R}

/-- zero locus of a set `s ‚äÜ R` is the set of all prime ideals larger than `s`.

if `f : R`, then it defines a function `ùî≠ ‚Ü¶ ([f] : R ‚ß∏ ùî≠)`.

So `V s` is exactly those primes
vanishing for all `f ‚àà s`.
-/
def v (s : Set R) : Set (Spec R) :=
  {I : Spec R | s ‚äÜ I.asIdeal}

theorem mem_v (s : Set R) {p : Spec R} : p ‚àà v s ‚Üî s ‚äÜ p.asIdeal :=
  Iff.rfl

/-- empty set is zero locus of `R`
-/
theorem v_univ : v (Set.univ : Set R) = ‚àÖ :=
  by
  rw [Set.eq_empty_iff_forall_not_mem]
  intro p
  rw [mem_v, Set.univ_subset_iff]
  have mem1 : (1 : R) ‚àâ (p.as_ideal : Set R) := p.as_ideal.ne_top_iff_one.mp p.is_prime.ne_top
  intro r
  rw [r] at mem1 
  exact mem1 ‚ü®‚ü©

/-- R is zero locus of `‚àÖ`
-/
theorem v_empty : v (‚àÖ : Set R) = Set.univ :=
  Set.eq_univ_iff_forall.mpr fun p x r => False.elim <| (Set.mem_empty_iff_false _).mp r

/-- union of zero loci is zero locus of pointwise product
-/
theorem v_union (s t : Set R) : v s ‚à™ v t = v (s * t) :=
  by
  ext p
  constructor
  ¬∑ rintro (hp | hp) <;> rw [mem_v] at hp ‚ä¢ <;> intro r hr <;> obtain ‚ü®a, b, ha, hb, rfl‚ü© := hr
    ¬∑ specialize hp ha
      exact p.as_ideal.mul_mem_right _ hp
    ¬∑ specialize hp hb
      exact p.as_ideal.mul_mem_left _ hp
  ¬∑ intro hp
    rw [mem_v] at hp 
    rw [Set.mem_union, mem_v, mem_v]
    contrapose! hp
    simp only [Set.not_subset_iff_exists_mem_not_mem] at hp ‚ä¢
    obtain ‚ü®‚ü®a, ha1, ha2‚ü©, ‚ü®b, hb1, hb2‚ü©‚ü© := hp
    exact
      ‚ü®_, ‚ü®a, b, ha1, hb1, rfl‚ü©, fun r =>
        (p.is_prime.mem_or_mem r).elim (fun h => ha2 h) fun h => hb2 h‚ü©

/-- intersection of zero loci is zero locus of union
-/
theorem v_inter {Œπ : Sort _} (s : Œπ ‚Üí Set R) : (‚ãÇ i : Œπ, v (s i)) = v (‚ãÉ i, s i) :=
  by
  ext p
  constructor <;> intro hp
  ¬∑ simp_rw [Set.mem_iInter, mem_v] at hp 
    rw [mem_v, Set.iUnion_subset_iff]
    assumption
  ¬∑ rw [mem_v, Set.iUnion_subset_iff] at hp 
    simp_rw [Set.mem_iInter, mem_v]
    assumption

end

instance zariskiTopology : TopologicalSpace (Spec R) :=
  TopologicalSpace.ofClosed {t | ‚àÉ s : Set R, t = v s} ‚ü®Set.univ, v_univ.symm‚ü©
    (by
      rintro _ hS
      choose a ha using hS
      rw [Set.sInter_eq_biInter]
      suffices (‚ãÇ (i : Set (Spec R)) (h : i ‚àà A), i) = ‚ãÇ i : A, v (a i.2)
        by
        rw [this, v_inter]
        exact ‚ü®_, rfl‚ü©
      simp only [Subtype.val_eq_coe, Subtype.coe_mk, Set.iInter_coe_set]
      exact Set.iInter_congr fun s => Set.iInter_congr fun hs => ha hs)
    (by
      rintro _ ‚ü®s, rfl‚ü© _ ‚ü®t, rfl‚ü©
      rw [v_union]
      exact ‚ü®s * t, rfl‚ü©)

/-- open sets of Zariski topology are complement of zero loci
-/
theorem zt_isOpen (s : Set (Spec R)) : IsOpen s ‚Üî ‚àÉ t : Set R, s = v t·∂ú :=
  by
  change (‚àÉ _, _) ‚Üî _
  rw [exists_congr]
  exact fun a => by rw [eq_compl_comm, eq_comm]

section

variable {R S}

/-- Basic open sets
-/
def d (f : R) : Set (Spec R) :=
  v {f}·∂ú

theorem mem_d (f : R) (p : Spec R) : p ‚àà d f ‚Üî f ‚àâ p.asIdeal := by
  constructor <;> intro hp hf <;>
      first
      | rw [d, Set.mem_compl_iff, mem_v, Set.singleton_subset_iff] at hp 
      | rw [mem_v, Set.singleton_subset_iff] at hf  <;>
    exact hp hf

theorem open_d (f : R) : IsOpen (d f) := by
  rw [d, zt_isOpen]
  exact ‚ü®_, rfl‚ü©

/-- Basic open sets form a basis
-/
theorem d_is_basis : IsTopologicalBasis (Set.range (d : R ‚Üí Set (Spec R))) :=
  isTopologicalBasis_of_open_of_nhds (by rintro _ ‚ü®r, -, rfl‚ü©; exact open_d _) fun p s hp hs =>
    by
    simp only [Set.mem_range, exists_prop, exists_exists_eq_and, mem_d]
    rw [zt_isOpen] at hs 
    obtain ‚ü®s, rfl‚ü© := hs
    rw [Set.mem_compl_iff, mem_v, Set.not_subset_iff_exists_mem_not_mem] at hp 
    obtain ‚ü®x, hx1, hx2‚ü© := hp
    refine' ‚ü®x, hx2, fun y hy H => _‚ü©
    exact (mem_d _ _).mp hy (H hx1)

/-- Ring homomorphisms induces continuous map (contravariantly).
-/
def comap (f : R ‚Üí+* S) : Spec S ‚Üí Spec R := fun p => ‚ü®p.asIdeal.comap f, inferInstance‚ü©

theorem comap_asIdeal (f : R ‚Üí+* S) (p : Spec S) : (comap f p).asIdeal = p.asIdeal.comap f :=
  rfl

theorem continuous_comap (f : R ‚Üí+* S) : Continuous (comap f) :=
  by
  refine' D_is_basis.continuous _ _
  rintro _ ‚ü®r, rfl‚ü©
  rw [show comap f ‚Åª¬π' d r = d (f r) by
      ext1 p
      simp only [Set.mem_preimage, mem_d, comap_asIdeal, Ideal.mem_comap]]
  exact open_d _

local notation "‚Ñ§[X]" => Polynomial ‚Ñ§

-- every thing from this points work for a generic integral domain
/-- the point corresponding to the zero ideal.
-/
@[simps]
noncomputable def Œ∑ : Spec ‚Ñ§[X] where
  asIdeal := ‚ä•
  IsPrime :=
    { ne_top' := by
        rw [Ideal.ne_top_iff_one, Ideal.mem_bot]
        norm_num
      mem_or_mem' := fun x y hxy =>
        by
        simp only [Ideal.mem_bot] at hxy ‚ä¢
        rwa [mul_eq_zero] at hxy  }

/-- this is a generic point.
-/
theorem generic_Œ∑ : closure {Œ∑} = (Set.univ : Set (Spec ‚Ñ§[X])) :=
  by
  rw [show closure {Œ∑} = v (Œ∑.as_ideal : Set ‚Ñ§[X])
      by
      ext
      rw [mem_v, mem_closure_iff, Œ∑_asIdeal]
      constructor
      ¬∑ intro h r hr
        rw [SetLike.mem_coe, Ideal.mem_bot] at hr 
        rw [hr]
        exact Ideal.zero_mem _
      ¬∑ rintro - o ho hx
        rw [zt_isOpen] at ho 
        obtain ‚ü®o, rfl‚ü© := ho
        rw [Set.mem_compl_iff, mem_v, Set.not_subset_iff_exists_mem_not_mem] at hx 
        obtain ‚ü®q, hq1, hq2‚ü© := hx
        by_cases q0 : q = 0
        ¬∑ rw [q0] at *
          exfalso
          refine' hq2 (Ideal.zero_mem _)
        rw [show v o·∂ú ‚à© {Œ∑} = {Œ∑}
            by
            rw [Set.inter_eq_right, Set.singleton_subset_iff, Set.mem_compl_iff, mem_v,
              Set.not_subset_iff_exists_mem_not_mem, Œ∑_asIdeal]
            exact ‚ü®q, hq1, q0‚ü©]
        exact ‚ü®Œ∑, Set.mem_singleton _‚ü©]
  rw [Œ∑_asIdeal, Set.eq_univ_iff_forall]
  intro x
  rw [mem_v]
  intro y hy
  rw [SetLike.mem_coe, Ideal.mem_bot] at hy 
  rw [hy]
  exact Ideal.zero_mem _

/-- Generic points is unique.
-/
theorem generic_point_uniq (x : Spec ‚Ñ§[X]) (hx : closure {x} = (Set.univ : Set (Spec ‚Ñ§[X]))) :
    x = Œ∑ := by
  have h : closure {x} = closure {Œ∑} := by rw [generic_Œ∑, hx]
  have H : ‚àÄ a b : Spec ‚Ñ§[X], a.asIdeal ‚â§ b.asIdeal ‚Üî b ‚àà closure {a} :=
    by
    intro a b
    constructor
    ¬∑ rw [mem_closure_iff]
      intro hle o ho hb
      rw [zt_isOpen] at ho 
      obtain ‚ü®o, rfl‚ü© := ho
      rw [Set.mem_compl_iff, mem_v, Set.not_subset_iff_exists_mem_not_mem] at hb 
      obtain ‚ü®q, hq1, hq2‚ü© := hb
      rw [Set.inter_nonempty]
      simp_rw [Set.mem_compl_iff, mem_v, Set.not_subset_iff_exists_mem_not_mem, SetLike.mem_coe]
      exact ‚ü®a, ‚ü®q, hq1, fun h => hq2 (hle h)‚ü©, Set.mem_singleton _‚ü©
    ¬∑ intro hmem p hp
      rw [mem_closure_iff] at hmem 
      contrapose! hp
      specialize hmem (d p) (open_d p) ((mem_d _ _).mpr hp)
      obtain ‚ü®x, hx1, hx2‚ü© := hmem
      rw [Set.mem_singleton_iff] at hx2 
      rw [hx2] at *
      rwa [mem_d] at hx1 
  have Hle1 : x.as_ideal ‚â§ Œ∑.as_ideal := by
    rw [H, h]
    exact subset_closure (Set.mem_singleton _)
  have Hle2 : Œ∑.as_ideal ‚â§ x.as_ideal := by
    rw [H, ‚Üê h]
    exact subset_closure (Set.mem_singleton _)
  ext1
  exact le_antisymm Hle1 Hle2

end

